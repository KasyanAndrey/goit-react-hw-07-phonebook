{"version":3,"sources":["componets/ContactList/ContactList.module.css","componets/Filter/Filter.module.css","redux/contacts/contacts-actions.jsx","redux/contacts/contacts-operations.jsx","redux/contacts/contacts-selectors.jsx","redux/contacts/contacts-reducer.jsx","redux/store.jsx","componets/ContactForm/ContactForm.jsx","componets/ContactList/ContactList.jsx","componets/Filter/Filter.jsx","App.js","index.js","componets/ContactForm/ContactForm.module.css"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deliteContactRequest","deliteContactSuccess","deliteContactError","changeFilter","axios","defaults","baseURL","fetchContacts","dispatch","get","then","data","catch","error","addContact","name","number","contact","post","deliteContact","contactId","delete","getFilter","state","contacts","filter","getContacts","items","getVisibleContacts","createSelector","normalezedFilter","toLowerCase","toLocaleLowerCase","includes","getIsAdded","map","createReducer","_","payload","id","loading","contactsReducer","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","devTools","process","ContactForm","useState","setName","setNumber","isAdded","useSelector","contactsSelectors","useDispatch","reset","nameInputId","uuidv4","numberInputId","onSubmit","event","preventDefault","alert","contactsOperations","className","s","form","title","htmlFor","type","value","onChange","target","pattern","required","input","btn","ContactList","useEffect","list","item","onClick","onDeletContacts","Filter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb97a826.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__JVHsX\",\"item\":\"ContactList_item__35EBW\",\"btn\":\"ContactList_btn__gYRJe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Filter_title__3Eq58\",\"input\":\"Filter_input__3-axY\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deliteContactRequest = createAction(\r\n  'contacts/deliteContactRequest',\r\n);\r\nexport const deliteContactSuccess = createAction(\r\n  'contacts/deliteContactSuccess',\r\n);\r\nexport const deliteContactError = createAction('contacts/deliteContactError');\r\n\r\nexport const changeFilter = createAction('App/changeFilter');\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deliteContactRequest,\r\n  deliteContactSuccess,\r\n  deliteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3030';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n    .catch(error => dispatch(fetchContactError(error)));\r\n};\r\n\r\nexport const addContact =\r\n  ({ name, number }) =>\r\n  dispatch => {\r\n    const contact = { name, number };\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n      .post('/contacts', contact)\r\n      .then(({ data }) => dispatch(addContactSuccess(data)))\r\n      .catch(error => dispatch(addContactError(error)));\r\n  };\r\n\r\nexport const deliteContact = contactId => dispatch => {\r\n  dispatch(deliteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deliteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deliteContactError(error)));\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getContacts = state => state.contacts.items;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalezedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(({ name }) =>\r\n      name.toLocaleLowerCase().includes(normalezedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nexport const getIsAdded = createSelector([getContacts], contacts => {\r\n  const isAdded = name => contacts.map(({ name }) => name).includes(name);\r\n  return isAdded;\r\n});\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deliteContactRequest,\r\n  deliteContactSuccess,\r\n  deliteContactError,\r\n  changeFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deliteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactRequest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n\r\n  [deliteContactRequest]: () => true,\r\n  [deliteContactSuccess]: () => false,\r\n  [deliteContactError]: () => false,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {contactsReducer} from './contacts';\r\nimport logger from 'redux-logger';\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\r\n\r\nimport s from './ContactForm.module.css';\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const isAdded = useSelector(contactsSelectors.getIsAdded);\r\n  const dispatch = useDispatch();\r\n\r\n  const changeName = event => setName(event.target.value);\r\n  const changeNumber = event => setNumber(event.target.value);\r\n\r\n  const handleSabmit = event => {\r\n    event.preventDefault();\r\n\r\n    if (isAdded(name)) {\r\n      reset();\r\n      return alert(`${name} is already in contacts.`);\r\n    } else {\r\n      dispatch(contactsOperations.addContact({ name, number }));\r\n    }\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const nameInputId = uuidv4();\r\n  const numberInputId = uuidv4();\r\n\r\n  return (\r\n    <form onSubmit={handleSabmit} className={s.form}>\r\n      <p className={s.title}>Name</p>\r\n      <label htmlFor={nameInputId}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={changeName}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          id={nameInputId}\r\n          required\r\n          className={s.input}\r\n        />\r\n      </label>\r\n\r\n      <p className={s.title}>Number</p>\r\n      <label htmlFor={numberInputId}>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={changeNumber}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          id={numberInputId}\r\n          required\r\n          className={s.input + ' ' + s.number}\r\n        />\r\n      </label>\r\n\r\n      <button type=\"submit\" className={s.btn}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n  }),\r\n};\r\n","import React, { useEffect } from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\r\n\r\n\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const onDeletContacts = id => dispatch(contactsOperations.deliteContact(id));\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className={s.item} key={id}>\r\n          <p>{name}:</p>\r\n          <p>{number}</p>\r\n          <button onClick={() => onDeletContacts(id)} className={s.btn}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsSelectors, changeFilter } from 'redux/contacts';\r\n\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(contactsSelectors.getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label htmlFor=\"\">\r\n      <p className={s.title}>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={event => dispatch(changeFilter(event.target.value))}\r\n        className={s.input}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\n\nimport ContactForm from './componets/ContactForm';\nimport ContactList from './componets/ContactList';\nimport Filter from './componets/Filter';\n\nimport './index.css';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3LrgO\",\"input\":\"ContactForm_input__1CcHv\",\"number\":\"ContactForm_number__2sJTR\",\"btn\":\"ContactForm_btn__3hXt4\",\"title\":\"ContactForm_title__1TqLh\"};"],"sourceRoot":""}